#:import data_caching data_caching
#:import strings strings
#: import values values
<ManagerLayout>:
    puzzle_label: puzzle_label
	timer_label: timer_label
	select_layout_manager: select_layout_manager
	timer: timer
	clear_button: clear_button
	tossup_button: tossup_button
	bonus_button: bonus_button
    name_input: name_input
    score_edit: score_edit
    custom_value: custom_value
    dropdown: dropdown
    btn_red: btn_red
    btn_ylw: btn_ylw
    btn_blu: btn_blu
    
    orientation: 'vertical'
	FloatLayout:
		size_hint_y: 0.5
		Label:
			id: puzzle_label
			halign: 'center'
			pos_hint: {'x': 0, 'y': 0}
		Label:
			id: timer_label
			text:
				'' if timer.seconds_left == timer.start_time \
				else strings.label_time_out if timer.seconds_left <= 0 \
				else strings.label_timer.format( \
				(		int(timer.seconds_left / 60)), \
				(		int(timer.seconds_left % 60)))
			text_size: self.size
			halign: 'right'
			valign: 'top'
			padding: (5, 5)
			pos_hint: {'x': 0, 'y': 0}
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: 0.25
		ScreenManager:
			id: select_layout_manager
			curr:
				# simply setting `current` here caused strange behavior
				None if not self.has_screen('solve?') \
				else 'select' if root.revealed and len(root.game) <= 1 \
				else 'next' if root.revealed and len(root.game) > 1 \
				else 'solve?' if (
				(		root.game and \
				(		root.game[0]['round_type'] == \
				(			strings.round_type_bonus))
				)	or \
				(		set(root.tossup_players_done) == set([1, 2, 3])) \
				) \
				else 'solve'
			on_curr:
				if self.curr != self.current: \
				self.current = self.curr
			Screen:
				name: 'select'
				Button:
					text: strings.button_select_puzzle
					on_release: root.choose_puzzle()
			Screen:
				name: 'next'
				Button:
					text: strings.button_next_puzzle
					on_release: root.next_puzzle()
			Screen:
				name: 'solve'
				Button:
					text: strings.mgr_btn_reveal
					on_release: root.reveal_puzzle()
			Screen:
				name: 'solve?'
				BoxLayout:
					orientation: 'horizontal'
					Button:
						text: strings.button_no_solve
						on_release: root.reveal_puzzle(False)
					Button:
						text: strings.mgr_btn_reveal
						on_release: root.reveal_puzzle()
        Button:
			id: clear_button
			visible: True if root.puzzle_string else False
			on_visible: root.show_hide(self)
			size_hint_x: 0
			width: 0
			opacity: 0
            text: strings.mgr_btn_clear
            on_release: root.clear_puzzle()
		FinalSpinTimer:
			id: timer
			visible:
				True if ( \
				root.game \
				and root.game[0]['round_type'] == strings.round_type_speedup) \
				else False
			on_visible: root.show_hide(self)
			size_hint_x: 0
			width: 0
		Button:
			id: tossup_button
			visible:
				True if ( \
				root.puzzle_string \
				and root.game \
				and root.game[0]['round_type'] in [\
				strings.round_type_tossup, \
				strings.round_type_triple_tossup, \
				strings.round_type_triple_tossup_final]) \
				else False
			on_visible: root.show_hide(self)
			text: strings.mgr_btn_tossup
			size_hint_x: 0
			width: 0
			opacity: 0
			on_release: root.tossup()
		Button:
			id: bonus_button
			visible:
				True if (\
				root.puzzle_string \
				and root.game \
				and root.game[0]['round_type'] == strings.round_type_bonus) \
				else False
			on_visible: root.show_hide(self)
			size_hint_x: 0
			width: 0
			opacity: 0
			text: strings.button_bonus_round
			on_release: root.bonus_round()
    BoxLayout:
        orientation: 'horizontal'
        PlayerButton:
            id: btn_red
            bg_color: values.color_red
            on_release: root.select_red()
        PlayerButton:
            id: btn_ylw
            bg_color: values.color_yellow
            on_release: root.select_yellow()
        PlayerButton:
            id: btn_blu
            bg_color: values.color_blue
            on_release: root.select_blue()
	BoxLayout:
		orientation: 'horizontal'
		BoxLayout:
			orientation: 'vertical'
			BoxLayout:
				orientation: 'horizontal'
				size_hint_y: 0.5
				TabCyclable:
					id: name_input
					hint_text: strings.input_name
					multiline: False
					on_text_validate:
						root.update_name(self.text)
						root.bind_keyboard_self()
					prev_widget: custom_value
					next_widget: score_edit
				Button:
					text: strings.button_ok
					size_hint_x: None
					width: 2 * self.height
					on_release: root.update_name(name_input.text)
			BoxLayout:
				orientation: 'horizontal'
				size_hint_y: 0.5
				TabCyclable:
					id: score_edit
					hint_text: strings.input_adjust_score
					multiline: False
					on_text_validate:
						root.bind_keyboard_self()
					prev_widget: name_input
					next_widget: custom_value
				SquareButton:
					text: '-'
					on_release:
						root.add_score(-data_caching.str_to_int(score_edit.text))
				SquareButton:
					text: '+'
					on_release:
						root.add_score(data_caching.str_to_int(score_edit.text))
			BoxLayout:
				orientation: 'horizontal'
				BoxLayout:
					orientation: 'vertical'
					TabCyclable:
						id: custom_value
						hint_text: strings.input_custom
						multiline: False
						on_text_validate:
							root.bind_keyboard_self()
						prev_widget: score_edit
						next_widget: name_input
					BoxLayout:
						orientation: 'horizontal'
						SettingsButton:
							on_release: root.cash_settings()
						Spinner:
							id: dropdown
							text: strings.mgr_select_value
				SquareButton:
					text: strings.button_guess_letter
					disabled:
						True if root.game \
						and root.game[0]['round_type'] in [\
						(	strings.round_type_tossup), \
						(	strings.round_type_bonus)] \
						else False
					on_release: root.guess_letter()
		GridLayout:
			rows: 2
			cols: 2
			disabled:
				True if root.game \
				and root.game[0]['round_type'] in [\
				(	strings.round_type_tossup), \
				(	strings.round_type_bonus)] \
				else False
			Button:
				text: strings.mgr_btn_lose_turn
				on_release: root.lose_turn()
			Button:
				text: strings.mgr_btn_bankrupt
				on_release: root.bankrupt()
			Button:
				text: strings.button_buy_vowel
				on_release: root.buy_vowel()
			Button:
				text: strings.mgr_btn_bank
				on_release: root.bank_score()
<Button>:
    halign: 'center'
<SquareButton>:
    size_hint_x: None
    width:self.height
<SettingsButton@ButtonBehavior+Label>:
    size_hint_x: None
    width:self.height
    canvas.before:
		Color:
			rgba: 1, 1, 1, 1
        Rectangle:
            pos: self.pos
            size: self.size
            source: strings.file_settings_icon
