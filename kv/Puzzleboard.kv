#:import data_caching data_caching
#:import strings strings
#:import values values
<PuzzleWithCategory>:
	puzzle_layout: None
	category: category
	orientation: 'vertical'
	SavableSplitter:
		name: 'category_splitter'
		sizable_from: 'bottom'
		Category:
			id: category
	SplitterSurround:
		name: 'puzzleboard'
		widget: root.puzzle_layout

<Panel>:
	layout: ll
	LetterLayout:
		id: ll
		source_image: src_im
		text_label: txt
		pos: self.parent.pos
		size: self.parent.size
		Image:
			id: src_im
			source: strings.file_panel
		Label:
			id: txt
			font_name: values.font_panel
			font_size: self.size[0] * values.font_panel_size
			bold: True
			halign: 'center'
			valign: 'center'

<PuzzleLayout>:
	rows: 4
	cols: 14
	panel_ratio: 1
	aspect_ratio: self.panel_ratio * self.cols / self.rows
	parent_aspect_ratio:
		(self.parent.width / self.parent.height) if self.parent else 1
	size_hint: None, None
    height:
        (self.width / self.aspect_ratio) \
        if self.aspect_ratio > self.parent_aspect_ratio \
        else self.parent.height if self.parent \
		else 0
    width:
        (self.height * self.aspect_ratio) \
        if self.aspect_ratio < self.parent_aspect_ratio \
        else self.parent.width if self.parent \
		else 0

<RotatedImage>:
	canvas.before:
		PushMatrix
		Rotate:
			angle: 180
			axis: (root.axis_x, root.axis_y, root.axis_z)
			origin: root.center
	canvas.after:
		PopMatrix

<Category@Label>:
	font_name: values.font_category
	font_size: self.size[1] * values.font_category_size
	canvas.before:
		Rectangle:
			pos: self.pos
			size: self.size
			source: strings.file_category_background

<SavableSplitter@Splitter>:
	name: ''
	min_size: 0
	strip_size: values.splitter_size
	axis: 1 if self.sizable_from in ['top', 'bottom'] else 0
	size_hint_y:
		data_caching.get_variables().get(self.name) \
		if self.name and self.axis \
		else 1
	size_hint_x:
		data_caching.get_variables().get(self.name) \
		if self.name and not self.axis \
		else 1
	on_release:
		if self.name: \
		data_caching.update_variables(\
		{	self.name: self.size[self.axis] / self.parent.size[self.axis]})

<SplitterSurround@BoxLayout>:
	name: ''
	widget: None
	on_widget:
		if self.widget: \
		center_layout.clear_widgets(); \
		center_layout.add_widget(self.widget)
	orientation: 'vertical'
	SavableSplitter:
		name: root.name + '_top_splitter' if root.name else ''
		sizable_from: 'bottom'
		Widget:
	BoxLayout:
		orientation: 'horizontal'
		SavableSplitter:
			name: root.name + '_left_splitter' if root.name else ''
			sizable_from: 'right'
			Widget:
		AnchorLayout:
			id: center_layout
		SavableSplitter:
			name: root.name + '_right_splitter' if root.name else ''
			sizable_from: 'left'
			Widget:
	SavableSplitter:
		name: root.name + '_bottom_splitter' if root.name else ''
		sizable_from: 'top'
		Widget:
